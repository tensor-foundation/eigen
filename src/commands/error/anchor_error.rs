use std::convert::TryFrom;

#[derive(Debug)]
pub enum AnchorErrorCode {
    InstructionMissing = 100,
    InstructionFallbackNotFound = 101,
    InstructionDidNotDeserialize = 102,
    InstructionDidNotSerialize = 103,
    IdlInstructionStub = 1_000,
    IdlInstructionInvalidProgram = 1001,
    IdlAccountNotEmpty = 1002,
    EventInstructionStub = 1_500,
    ConstraintMut = 2_000,
    ConstraintHasOne = 2001,
    ConstraintSigner = 2002,
    ConstraintRaw = 2003,
    ConstraintOwner = 2004,
    ConstraintRentExempt = 2005,
    ConstraintSeeds = 2006,
    ConstraintExecutable = 2007,
    ConstraintState = 2008,
    ConstraintAssociated = 2009,
    ConstraintAssociatedInit = 2010,
    ConstraintClose = 2011,
    ConstraintAddress = 2012,
    ConstraintZero = 2013,
    ConstraintTokenMint = 2014,
    ConstraintTokenOwner = 2015,
    ConstraintMintMintAuthority = 2016,
    ConstraintMintFreezeAuthority = 2017,
    ConstraintMintDecimals = 2018,
    ConstraintSpace = 2019,
    ConstraintAccountIsNone = 2020,
    ConstraintTokenTokenProgram = 2021,
    ConstraintMintTokenProgram = 2022,
    ConstraintAssociatedTokenTokenProgram = 2023,
    ConstraintMintGroupPointerExtension = 2024,
    ConstraintMintGroupPointerExtensionAuthority = 2025,
    ConstraintMintGroupPointerExtensionGroupAddress = 2026,
    ConstraintMintGroupMemberPointerExtension = 2027,
    ConstraintMintGroupMemberPointerExtensionAuthority = 2028,
    ConstraintMintGroupMemberPointerExtensionMemberAddress = 2029,
    ConstraintMintMetadataPointerExtension = 2030,
    ConstraintMintMetadataPointerExtensionAuthority = 2031,
    ConstraintMintMetadataPointerExtensionMetadataAddress = 2032,
    ConstraintMintCloseAuthorityExtension = 2033,
    ConstraintMintCloseAuthorityExtensionAuthority = 2034,
    ConstraintMintPermanentDelegateExtension = 2035,
    ConstraintMintPermanentDelegateExtensionDelegate = 2036,
    ConstraintMintTransferHookExtension = 2037,
    ConstraintMintTransferHookExtensionAuthority = 2038,
    ConstraintMintTransferHookExtensionProgramId = 2039,
    RequireViolated = 2_500,
    RequireEqViolated = 2501,
    RequireKeysEqViolated = 2502,
    RequireNeqViolated = 2503,
    RequireKeysNeqViolated = 2504,
    RequireGtViolated = 2505,
    RequireGteViolated = 2506,
    AccountDiscriminatorAlreadySet = 3_000,
    AccountDiscriminatorNotFound = 3001,
    AccountDiscriminatorMismatch = 3002,
    AccountDidNotDeserialize = 3003,
    AccountDidNotSerialize = 3004,
    AccountNotEnoughKeys = 3005,
    AccountNotMutable = 3006,
    AccountOwnedByWrongProgram = 3007,
    InvalidProgramId = 3008,
    InvalidProgramExecutable = 3009,
    AccountNotSigner = 3010,
    AccountNotSystemOwned = 3011,
    AccountNotInitialized = 3012,
    AccountNotProgramData = 3013,
    AccountNotAssociatedTokenAccount = 3014,
    AccountSysvarMismatch = 3015,
    AccountReallocExceedsLimit = 3016,
    AccountDuplicateReallocs = 3017,
    DeclaredProgramIdMismatch = 4_100,
    TryingToInitPayerAsProgramAccount = 4_101,
    InvalidNumericConversion = 4_102,
    Deprecated = 5_000,
}

impl TryFrom<u32> for AnchorErrorCode {
    type Error = ();

    fn try_from(value: u32) -> Result<Self, Self::Error> {
        match value {
            100 => Ok(AnchorErrorCode::InstructionMissing),
            101 => Ok(AnchorErrorCode::InstructionFallbackNotFound),
            102 => Ok(AnchorErrorCode::InstructionDidNotDeserialize),
            103 => Ok(AnchorErrorCode::InstructionDidNotSerialize),
            1000 => Ok(AnchorErrorCode::IdlInstructionStub),
            1001 => Ok(AnchorErrorCode::IdlInstructionInvalidProgram),
            1002 => Ok(AnchorErrorCode::IdlAccountNotEmpty),
            1500 => Ok(AnchorErrorCode::EventInstructionStub),
            2000 => Ok(AnchorErrorCode::ConstraintMut),
            2001 => Ok(AnchorErrorCode::ConstraintHasOne),
            2002 => Ok(AnchorErrorCode::ConstraintSigner),
            2003 => Ok(AnchorErrorCode::ConstraintRaw),
            2004 => Ok(AnchorErrorCode::ConstraintOwner),
            2005 => Ok(AnchorErrorCode::ConstraintRentExempt),
            2006 => Ok(AnchorErrorCode::ConstraintSeeds),
            2007 => Ok(AnchorErrorCode::ConstraintExecutable),
            2008 => Ok(AnchorErrorCode::ConstraintState),
            2009 => Ok(AnchorErrorCode::ConstraintAssociated),
            2010 => Ok(AnchorErrorCode::ConstraintAssociatedInit),
            2011 => Ok(AnchorErrorCode::ConstraintClose),
            2012 => Ok(AnchorErrorCode::ConstraintAddress),
            2013 => Ok(AnchorErrorCode::ConstraintZero),
            2014 => Ok(AnchorErrorCode::ConstraintTokenMint),
            2015 => Ok(AnchorErrorCode::ConstraintTokenOwner),
            2016 => Ok(AnchorErrorCode::ConstraintMintMintAuthority),
            2017 => Ok(AnchorErrorCode::ConstraintMintFreezeAuthority),
            2018 => Ok(AnchorErrorCode::ConstraintMintDecimals),
            2019 => Ok(AnchorErrorCode::ConstraintSpace),
            2020 => Ok(AnchorErrorCode::ConstraintAccountIsNone),
            2021 => Ok(AnchorErrorCode::ConstraintTokenTokenProgram),
            2022 => Ok(AnchorErrorCode::ConstraintMintTokenProgram),
            2023 => Ok(AnchorErrorCode::ConstraintAssociatedTokenTokenProgram),
            2024 => Ok(AnchorErrorCode::ConstraintMintGroupPointerExtension),
            2025 => Ok(AnchorErrorCode::ConstraintMintGroupPointerExtensionAuthority),
            2026 => Ok(AnchorErrorCode::ConstraintMintGroupPointerExtensionGroupAddress),
            2027 => Ok(AnchorErrorCode::ConstraintMintGroupMemberPointerExtension),
            2028 => Ok(AnchorErrorCode::ConstraintMintGroupMemberPointerExtensionAuthority),
            2029 => Ok(AnchorErrorCode::ConstraintMintGroupMemberPointerExtensionMemberAddress),
            2030 => Ok(AnchorErrorCode::ConstraintMintMetadataPointerExtension),
            2031 => Ok(AnchorErrorCode::ConstraintMintMetadataPointerExtensionAuthority),
            2032 => Ok(AnchorErrorCode::ConstraintMintMetadataPointerExtensionMetadataAddress),
            2033 => Ok(AnchorErrorCode::ConstraintMintCloseAuthorityExtension),
            2034 => Ok(AnchorErrorCode::ConstraintMintCloseAuthorityExtensionAuthority),
            2035 => Ok(AnchorErrorCode::ConstraintMintPermanentDelegateExtension),
            2036 => Ok(AnchorErrorCode::ConstraintMintPermanentDelegateExtensionDelegate),
            2037 => Ok(AnchorErrorCode::ConstraintMintTransferHookExtension),
            2038 => Ok(AnchorErrorCode::ConstraintMintTransferHookExtensionAuthority),
            2039 => Ok(AnchorErrorCode::ConstraintMintTransferHookExtensionProgramId),
            2500 => Ok(AnchorErrorCode::RequireViolated),
            2501 => Ok(AnchorErrorCode::RequireEqViolated),
            2502 => Ok(AnchorErrorCode::RequireKeysEqViolated),
            2503 => Ok(AnchorErrorCode::RequireNeqViolated),
            2504 => Ok(AnchorErrorCode::RequireKeysNeqViolated),
            2505 => Ok(AnchorErrorCode::RequireGtViolated),
            2506 => Ok(AnchorErrorCode::RequireGteViolated),
            3000 => Ok(AnchorErrorCode::AccountDiscriminatorAlreadySet),
            3001 => Ok(AnchorErrorCode::AccountDiscriminatorNotFound),
            3002 => Ok(AnchorErrorCode::AccountDiscriminatorMismatch),
            3003 => Ok(AnchorErrorCode::AccountDidNotDeserialize),
            3004 => Ok(AnchorErrorCode::AccountDidNotSerialize),
            3005 => Ok(AnchorErrorCode::AccountNotEnoughKeys),
            3006 => Ok(AnchorErrorCode::AccountNotMutable),
            3007 => Ok(AnchorErrorCode::AccountOwnedByWrongProgram),
            3008 => Ok(AnchorErrorCode::InvalidProgramId),
            3009 => Ok(AnchorErrorCode::InvalidProgramExecutable),
            3010 => Ok(AnchorErrorCode::AccountNotSigner),
            3011 => Ok(AnchorErrorCode::AccountNotSystemOwned),
            3012 => Ok(AnchorErrorCode::AccountNotInitialized),
            3013 => Ok(AnchorErrorCode::AccountNotProgramData),
            3014 => Ok(AnchorErrorCode::AccountNotAssociatedTokenAccount),
            3015 => Ok(AnchorErrorCode::AccountSysvarMismatch),
            3016 => Ok(AnchorErrorCode::AccountReallocExceedsLimit),
            3017 => Ok(AnchorErrorCode::AccountDuplicateReallocs),
            4100 => Ok(AnchorErrorCode::DeclaredProgramIdMismatch),
            4101 => Ok(AnchorErrorCode::TryingToInitPayerAsProgramAccount),
            4102 => Ok(AnchorErrorCode::InvalidNumericConversion),
            5000 => Ok(AnchorErrorCode::Deprecated),
            _ => Err(()),
        }
    }
}
